'''Load all sh300 asset data to calculate normalized features'''


import os
import pandas as pd
import numpy as np
from scipy.special import gamma, psi
from scipy import stats

def realized_quantity(fun):
    return intraday_returns.groupby(pd.Grouper(freq="1d")).apply(fun)[index]

if __name__ == "__main__":
    
    folder_path = r"E:\2023Oct\HTF_risk_factor\data\sh300_1year_1min_23\5m_test"
    for file in os.listdir(folder_path):
        if file.endswith(".csv"):
            data = pd.read_csv(os.path.join(folder_path, file))
            data["date_time"] = pd.to_datetime(data["date"] + " " + data["time"])
            data.set_index("date_time", inplace=True)
            
            # Load data and store the intraday returns
            intraday_returns = np.log(data["close"] / data["close"].shift(1)).dropna() 
            
            # Index of all days
            index = data.groupby(pd.Grouper(freq="1d")).first().dropna().index
            
            # setting & required constants
            M = 48
            # μ1
            mu_1 = np.sqrt((2 / np.pi))
            # μ43
            # mu_43 = 2 ** (2 / 3) * gamma(7 / 6) * gamma(1 / 2) ** (-1)
            
            # First and last price of each day 
            prices_open = data.resample('D').first()['open']
            prices_close = data.resample('D').last()['close']
            
            # Return (close-to-close) 
            r_cc = pd.Series(np.log(prices_close / prices_close.shift(1)), name='r_cc')
            
            # Realized Variance (Andersen and Bollerslev, 1998)
            rv = realized_quantity(lambda x: (x ** 2).sum())
            
            # Realized absolute variation (Forsberg and Ghysels, 2007)
            rav = mu_1 ** (-1) * M ** (-.5) * realized_quantity(lambda x: x.abs().sum())
            
            # Realized bipower variation (Barndorff-Nielsen and Shephard; 2004, 2006)
            bv = mu_1 ** (-2) * realized_quantity(lambda x: (x.abs() * x.shift(1).abs()).sum())
            
            '''# Standardized tri-power quarticity (see e.g. Forsberg & Ghysels, 2007)
            tq = M * mu_43 ** (-3) * realized_quantity(
                lambda x: (x.abs() ** (4 / 3) * x.shift(1).abs() ** (4 / 3) * x.shift(2).abs() ** (4 / 3)).sum())
            
            # Jump test by Huang and Tauchen (2005)
            j = (np.log(rv) - np.log(bv)) / \
                ((mu_1 ** -4 + 2 * mu_1 ** -2 - 5) / (M * tq * bv ** -2)) ** 0.5
            jump = j.abs() >= stats.norm.ppf(0.999)
            
            # Separate continuous and discontinuous parts of the quadratic variation
            iv = pd.Series(0, index=index)
            iv[jump] = bv[jump] ** 0.5
            iv[~jump] = rv[~jump] ** 0.5
            jv = pd.Series(0, index=index)
            jv[jump] = rv[jump] ** 0.5 - bv[jump] ** 0.5
            jv[jv < 0] = 0'''
            
            # Realized Semivariance (Barndorff-Nielsen, Kinnebrock and Shephard, 2010)
            rv_m = realized_quantity(lambda x: (x ** 2 * (x < 0)).sum())
            rv_p = realized_quantity(lambda x: (x ** 2 * (x > 0)).sum())
            
            '''# Signed jump variation (Patton and Sheppard, 2015)
            sjv = rv_p - rv_m
            sjv_p = sjv * (sjv > 0)
            sjv_m = sjv * (sjv < 0)
            
            # Realized Skewness and Kurtosis  (see, e.g. Amaya, Christoffersen, Jacobs and Vasquez, 2015)
            rm3 = realized_quantity(lambda x: (x ** 3).sum())
            rm4 = realized_quantity(lambda x: (x ** 4).sum())
            rs = np.sqrt(M) * rm3 / rv ** (3 / 2)
            rk = M * rm4 / rv ** 2'''
            
            # Export data
            out = pd.concat([r_cc, rav, rv ** .5, bv ** .5, rv_m ** 0.5, rv_p ** 0.5]
                              ,axis=1) # iv, jv, sjv, sjv_p, sjv_m, rs, rk],
            out.columns = ['r_cc', 'rav', 'rvol', 'bvol', 'rvol_m', 'rvol_p']
                            # 'ivol', 'jvol', 'sjv', 'sjv_p', 'sjv_m', 'rs', 'rk'
            # df转csv
            out = (out - out.mean()) / out.std()
            out.to_csv(os.path.join(folder_path,  file)) 


# Remove empty lines and forward fill missing values
import os
import pandas as pd
drop_rows = [7,8,14,15,21,22,28,29,35,36,42,43,49,50,56,57,63,64,65,70,71,78,77,84,85,86,87,88,89,90,91,92,98,99,105,106,112,113,
119,120,126,127,133,134,140,141,147,148,154,155,158,161,162,168,169,175,176,182,183,184,185,186,189,190,196,197,203,204,210,211,
217,218,224,225,231,232,236,237,238,239,245,246,252,253,259,260,266,267,273,274,280,281,287,288,294,295,301,302,308,309,315,316,
322,323,329,330,335,336,337,338,339,340,341,342,343,344,350,351,357,358,364,365]
folder_path = r"E:\2023Oct\HTF_risk_factor\data\sh300_1year_1min_23\5m_test"
for file_name in os.listdir(folder_path):
    if file_name.endswith(".csv"):
        file_path = os.path.join(folder_path, file_name)
        df = pd.read_csv(file_path)
        df = df.drop(drop_rows, axis=0)
        df = df.fillna(method="ffill")
        df = df.fillna(method="bfill")
        df.to_csv(file_path, index=False)
        print(f"已处理文件：{file_path}")

